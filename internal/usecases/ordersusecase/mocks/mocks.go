// Code generated by MockGen. DO NOT EDIT.
// Source: orders.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entities "github.com/MaximPolyaev/gofermart/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *Mockstorage) CreateOrder(ctx context.Context, number string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, number, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockstorageMockRecorder) CreateOrder(ctx, number, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*Mockstorage)(nil).CreateOrder), ctx, number, userID)
}

// FindOrdersByUserID mocks base method.
func (m *Mockstorage) FindOrdersByUserID(ctx context.Context, userID int) ([]entities.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrdersByUserID", ctx, userID)
	ret0, _ := ret[0].([]entities.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrdersByUserID indicates an expected call of FindOrdersByUserID.
func (mr *MockstorageMockRecorder) FindOrdersByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrdersByUserID", reflect.TypeOf((*Mockstorage)(nil).FindOrdersByUserID), ctx, userID)
}

// FindUserIDByOrderNumber mocks base method.
func (m *Mockstorage) FindUserIDByOrderNumber(ctx context.Context, number string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUserIDByOrderNumber", ctx, number)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUserIDByOrderNumber indicates an expected call of FindUserIDByOrderNumber.
func (mr *MockstorageMockRecorder) FindUserIDByOrderNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUserIDByOrderNumber", reflect.TypeOf((*Mockstorage)(nil).FindUserIDByOrderNumber), ctx, number)
}
