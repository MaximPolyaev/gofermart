// Code generated by MockGen. DO NOT EDIT.
// Source: balance.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	entities "github.com/MaximPolyaev/gofermart/internal/entities"
	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// FindBalanceByUserID mocks base method.
func (m *Mockstorage) FindBalanceByUserID(ctx context.Context, tx *sql.Tx, userID int) (*entities.UserBalance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBalanceByUserID", ctx, tx, userID)
	ret0, _ := ret[0].(*entities.UserBalance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBalanceByUserID indicates an expected call of FindBalanceByUserID.
func (mr *MockstorageMockRecorder) FindBalanceByUserID(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBalanceByUserID", reflect.TypeOf((*Mockstorage)(nil).FindBalanceByUserID), ctx, tx, userID)
}

// FindOrderIDByNumber mocks base method.
func (m *Mockstorage) FindOrderIDByNumber(ctx context.Context, number string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderIDByNumber", ctx, number)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderIDByNumber indicates an expected call of FindOrderIDByNumber.
func (mr *MockstorageMockRecorder) FindOrderIDByNumber(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderIDByNumber", reflect.TypeOf((*Mockstorage)(nil).FindOrderIDByNumber), ctx, number)
}

// FindWroteOffs mocks base method.
func (m *Mockstorage) FindWroteOffs(ctx context.Context, userID int) ([]entities.WroteOff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWroteOffs", ctx, userID)
	ret0, _ := ret[0].([]entities.WroteOff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindWroteOffs indicates an expected call of FindWroteOffs.
func (mr *MockstorageMockRecorder) FindWroteOffs(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWroteOffs", reflect.TypeOf((*Mockstorage)(nil).FindWroteOffs), ctx, userID)
}

// WriteOff mocks base method.
func (m *Mockstorage) WriteOff(ctx context.Context, orderID, userID int, points float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteOff", ctx, orderID, userID, points)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteOff indicates an expected call of WriteOff.
func (mr *MockstorageMockRecorder) WriteOff(ctx, orderID, userID, points interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteOff", reflect.TypeOf((*Mockstorage)(nil).WriteOff), ctx, orderID, userID, points)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), args...)
}
