// Code generated by MockGen. DO NOT EDIT.
// Source: accruals.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	entities "github.com/MaximPolyaev/gofermart/internal/entities"
	orderstatus "github.com/MaximPolyaev/gofermart/internal/enums/orderstatus"
	gomock "github.com/golang/mock/gomock"
)

// Mockaccrual is a mock of accrual interface.
type Mockaccrual struct {
	ctrl     *gomock.Controller
	recorder *MockaccrualMockRecorder
}

// MockaccrualMockRecorder is the mock recorder for Mockaccrual.
type MockaccrualMockRecorder struct {
	mock *Mockaccrual
}

// NewMockaccrual creates a new mock instance.
func NewMockaccrual(ctrl *gomock.Controller) *Mockaccrual {
	mock := &Mockaccrual{ctrl: ctrl}
	mock.recorder = &MockaccrualMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockaccrual) EXPECT() *MockaccrualMockRecorder {
	return m.recorder
}

// FetchAccrualOrder mocks base method.
func (m *Mockaccrual) FetchAccrualOrder(ctx context.Context, number string) (*entities.AccrualOrder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAccrualOrder", ctx, number)
	ret0, _ := ret[0].(*entities.AccrualOrder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAccrualOrder indicates an expected call of FetchAccrualOrder.
func (mr *MockaccrualMockRecorder) FetchAccrualOrder(ctx, number interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAccrualOrder", reflect.TypeOf((*Mockaccrual)(nil).FetchAccrualOrder), ctx, number)
}

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *Mocklogger) Error(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockloggerMockRecorder) Error(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*Mocklogger)(nil).Error), args...)
}

// Info mocks base method.
func (m *Mocklogger) Info(args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockloggerMockRecorder) Info(args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*Mocklogger)(nil).Info), args...)
}

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// ChangeOrderStatus mocks base method.
func (m *Mockstorage) ChangeOrderStatus(ctx context.Context, number string, status orderstatus.OrderStatus, tx *sql.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeOrderStatus", ctx, number, status, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeOrderStatus indicates an expected call of ChangeOrderStatus.
func (mr *MockstorageMockRecorder) ChangeOrderStatus(ctx, number, status, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeOrderStatus", reflect.TypeOf((*Mockstorage)(nil).ChangeOrderStatus), ctx, number, status, tx)
}

// FindOrderNumbersToUpdateAccruals mocks base method.
func (m *Mockstorage) FindOrderNumbersToUpdateAccruals(ctx context.Context) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOrderNumbersToUpdateAccruals", ctx)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOrderNumbersToUpdateAccruals indicates an expected call of FindOrderNumbersToUpdateAccruals.
func (mr *MockstorageMockRecorder) FindOrderNumbersToUpdateAccruals(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOrderNumbersToUpdateAccruals", reflect.TypeOf((*Mockstorage)(nil).FindOrderNumbersToUpdateAccruals), ctx)
}

// UpdateOrder mocks base method.
func (m *Mockstorage) UpdateOrder(ctx context.Context, order *entities.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrder", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrder indicates an expected call of UpdateOrder.
func (mr *MockstorageMockRecorder) UpdateOrder(ctx, order interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrder", reflect.TypeOf((*Mockstorage)(nil).UpdateOrder), ctx, order)
}
